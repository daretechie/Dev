- description: ''
  executionEnabled: true
  id: 4d9ab787-d97c-4c8b-bda8-44a3e579d3f5
  loglevel: INFO
  name: CreateEnvironment
  nodeFilterEditable: false
  options:
  - enforced: true
    name: ApplicationVersion
    required: true
    values:
    - v1.0
    - v1.2
    - v2.0
  - name: EnvironmentName
    required: true
  - enforced: true
    name: Timeout
    required: true
    values:
    - '300'
    - '3600'
    - '900'
  scheduleEnabled: true
  sequence:
    commands:
    - script: |-
        #!/bin/bash
        export AWS_ACCESS_KEY_ID=""
        export AWS_SECRET_ACCESS_KEY=""
        export AWS_DEFAULT_REGION="us-east-1"

        PROVISIONING_SCRIPT="#!/bin/bash
        apt-get -y update
        apt-get -y install nginx
        echo App: $RD_OPTION_APPLICATIONVERSION > /var/www/html/index.html
        sleep $RD_OPTION_TIMEOUT
        shutdown -h now
        "

        EXISTING_SG=$(aws ec2 describe-security-groups --group-names RundeckExample --query 'SecurityGroups[0].{Id:GroupId}' --output text)

        DEFAULT_VPC=$(aws ec2 describe-vpcs --query 'Vpcs[0].{Id:VpcId}' --output text)

        # Create a security group
        if [[ "$EXISTING_SG" == "" ]]; then
        	echo -n "Creating a new security group..."
        	aws ec2 create-security-group --group-name RundeckExample --description "SG for Rundeck Example" --vpc-id $DEFAULT_VPC
        	aws ec2 authorize-security-group-ingress --group-name RundeckExample --protocol tcp --port 80 --cidr 0.0.0.0/0
        	EXISTING_SG=$(aws ec2 describe-security-groups --group-names RundeckExample --query 'SecurityGroups[0].{Id:GroupId}' --output text)

        	echo "$EXISTING_SG"
        else
        	echo "Found Security Group $EXISTING_SG"
        fi

        # Create the instance
        CREATED_ID=$(aws ec2 run-instances --image-id ami-da05a4a0 --count 1 --instance-type t2.micro --security-groups RundeckExample --user-data "$PROVISIONING_SCRIPT" --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$RD_OPTION_ENVIRONMENTNAME}]" --query 'Instances[0].{Id:InstanceId}' --output text)

        # Get the public hostname
        PUBLIC_HOSTNAME=$(aws ec2 describe-instances --instance-id $CREATED_ID --query 'Reservations[0].Instances[0].{Hostname:PublicDnsName}' --output text)

        echo "Environment started in http://$PUBLIC_HOSTNAME"
    keepgoing: false
    strategy: node-first
  uuid: 4d9ab787-d97c-4c8b-bda8-44a3e579d3f5
